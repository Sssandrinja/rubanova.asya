#!/usr/bin/env python
# coding: utf-8

# In[8]:


# 5.1
# Написать задокументированную функцию умножения двух чисел. Для каких типов данная функция будет возвращать 
# практически ценный результат? Написать примеры использования этой функции.

def multiply(a, b):

# документация

    """

    Умножает два числа и возвращает их произведение.



    Аргументы:

    a (int, float): Первое число для умножения.

    b (int, float): Второе число для умножения.



    Возвращает:

    int, float: Произведение двух чисел.



    Примеры использования:

    >>> multiply(2, 2)

    4

    >>> multiply(2.5, 2)

    5.0

    >>> multiply(0, 2)

    0

    """


    return a * b

print(help(multiply)) # смотрим, что делает данная функция
print(multiply(2, 2))


# In[26]:


# 5.9
# Написать функцию, которая преобразует целое число (от 0 до 999) из текстового представления на руссоком языке 
# в число типа int. Пример: to_int('тридцать три') -> 33

def to_int(text):

    numbers = {

    'ноль': 0,

    'один': 1,
        
    'два': 2,

    'три': 3,

    'четыре': 4,

    'пять': 5,

    'шесть': 6,

    'семь': 7,

    'восемь': 8,

    'девять': 9,

    'десять': 10,

    'одиннадцать': 11,

    'двенадцать': 12,

    'тринадцать': 13,

    'четырнадцать': 14,

    'пятнадцать': 15,

    'шестнадцать': 16,

    'семнадцать': 17,

    'восемнадцать': 18,

    'девятнадцать': 19,

    'двадцать': 20,

    'тридцать': 30,

    'сорок': 40,

    'пятьдесят': 50,

    'шестьдесят': 60,

    'семьдесят': 70,

    'восемьдесят': 80,

    'девяносто': 90,

    'сто': 100,

    'двести': 200,

    'триста': 300,

    'четыреста': 400,

    'пятьсот': 500,

    'шестьсот': 600,

    'семьсот': 700,

    'восемьсот': 800,

    'девятьсот': 900}



# Разделяем входной текст на отдельные слова

    words = text.split()



# Создаем переменную для хранения результата

    result = 0



# Обрабатываем каждое слово в списке

    for word in words:

# Если слово есть в словаре numbers, добавляем соответствующее значение к результату

        if word in numbers:

           result += numbers[word]



    return result



print(to_int("двадцать девять"))


# In[34]:


# 5.8
# Написать функцию, которая преобразует целое число (от 0 до 99) в текстовое написание числа на русском языке. 
# Пример: to_text(15) -> 'Пятнадцать'

def to_text(number):

    numbers = {

    0: 'ноль',

    1: 'один',

    2: 'два',

    3: 'три',

    4: 'четыре',

    5: 'пять',

    6: 'шесть',

    7: 'семь',

    8: 'восемь',

    9: 'девять',

    10: 'десять',

    11: 'одиннадцать',

    12: 'двенадцать',

    13: 'тринадцать',

    14: 'четырнадцать',

    15: 'пятнадцать',

    16: 'шестнадцать',

    17: 'семнадцать',

    18: 'восемнадцать',

    19: 'девятнадцать',

    20: 'двадцать',

    30: 'тридцать',

    40: 'сорок',

    50: 'пятьдесят',

    60: 'шестьдесят',

    70: 'семьдесят',

    80: 'восемьдесят',

    90: 'девяносто'}



# Если число находится в словаре numbers, возвращаем соответствующее текстовое представление

    if number in numbers:

        return numbers[number]



# Разделяем число на десятки и единицы

    tens = number // 10 * 10

    units = number % 10



# Составляем текстовое представление числа

    text = numbers[tens] + ' ' + numbers[units]



    return text

print(to_text(15))


# In[39]:


# 5.2
# Написать функцию умножения принимающую от одного до трех параметров. Написать примеры использования 
# этой функции с разным количеством параметров.

def multiply(a, b=None, c=None): # если в скобках не прописали b или c, то автоматически присвоится None

    if b is None:

        return a

    elif c is None:

        return a * b

    else:

        return a * b * c

print(multiply(3))

print(multiply(3,3))

print(multiply(3, 3, 3))


# In[62]:


# 5.7
# Реализовать функцию которая выводит на экран сообщение вида: 'Автомобиль марки: BMW, модели: X5, цвета: белый, 
# 2006 года выпуска, с пробегом: 215 000 км, c номерным знаком: X012АМ77, цена: 1 115 000 руб.'
# В функцию передаются именованные параметры изменяемой части сообщения, лубой из параметров может быть не задан 
# пользователем функции и автоматически заменен на разумное сообщение в соответствующей части строки. 
# Получить вывод текстового сообщения для словарей c1, c2

def print_car_info(brand='неизвестная марка', model='неизвестная модель', color='неизвестный цвет', year='неизвестный год', mileage='неизвестный пробег', license_plate='неизвестный номер', price='неизвестная цена'):
    message = f'Автомобиль марки: {brand}, модели: {model}, цвета: {color}, {year} года выпуска, с пробегом: {mileage} км, c номерным знаком: {license_plate}, цена: {price} руб.'
    
    print(message)

c1 = {
    'brand': 'BMW',

    'model': 'X5',

    'color': 'белый',

    'year': '2006',

    'mileage': '215 000',

    'license_plate': 'X012АМ77',

    'price': '1 115 000'
}



c2 = {
    'brand': 'Audi',

    'model': 'A4',

    'color': 'серый',

    'year': '2012',

    'mileage': '120 000',

    'price': '850 000'
}



print_car_info(**c1)

print_car_info(**c2)


# In[ ]:




