#!/usr/bin/env python
# coding: utf-8

# In[1]:


print("№1")
#Перечисление:
numbers_1 = [31, 24, 17]
 
#На основе другого списка (копирование):
numbers_2 = numbers_1.copy()
 
# С помощью функции range:
 
numbers_3 = list(range(31, 16, -7)) # в range() три параметра - start, stop, step(SSS)
 
# Начало нашего отрезка 31, конец 16(тк последнее не включается), шаг -7. Если записать отрезок математически, то он выглядит так [31б 17)
# range всегда включает начало отрезка, и всегда не включает конец
# Те на первом шаге выполнения внутри range будет 31
# Затем идем на убывание с шагом 7, те 31-7 = 24
# Затем опять на убывание 24-7 = 17. Вот мы и заполнили
 
print("Перечисление:", numbers_1)
print("На основе другого списка:", numbers_2)
print("С помощью функции range:", numbers_3)
 
list_of_lists = [numbers_1, numbers_2, numbers_3]
print("Список из полученных списков:", list_of_lists)


# In[3]:


print("№2")
# Создание списка из всех символов введенной пользователем строки
user_input = input("Введите строку: ")
characters = list(user_input) # Просто строку обращаем в список (каждый символ строки становится элементом списка characters)
print("Список символов:", characters)
 
# Создание списка из всех слов введенной пользователем строки
words = user_input.split() # Функция сплит разбивает строку по разделителю, указанному в кавычках внутри скобок. По умолчанию считается разделять по пробелу
print("Список слов:", words)
 
# Создание списка из всех цифр в заданной строке
digits = [symbol for symbol in user_input if symbol.isdigit()]
print("Список цифр:", digits)
 
# Это списочное выражение работает так: добавить в список digit символ из введенной строки
# Если символ является числом(isdigit это проверяет и возвращает True или False. Если True - элемент добавится. И так по всей введенной строке)


# In[4]:


print("№3")
# Заданный список
my_list = ['input', 'string', 'repeat', 3]
 
# Проверка условия наличия слова "repeat" и последнего элемента - числа
if 'repeat' in my_list and isinstance(my_list[-1], int):
    # Получение количества копий элементов списка, исключая последние два элемента
    num_copies = len(my_list[:-2])
    
    # Создание списка с повторениями элементов и добавлением последних двух элементов
    new_list = my_list[:-2] * num_copies + my_list[-2:]
    
    # Замена исходного списка на новый список
    my_list = new_list
 
print("Результат:", my_list)
 
# isinstance()` - это функция в Python, которая используется для проверки типа объекта. Она принимает два аргумента: объект, который будет проверяться, и тип, с которым будет сравниваться объект.
  
# Функция `isinstance()` возвращает `True`, если объект является экземпляром указанного типа, и `False` в противном случае.
 
# В нашей программе isinstance(my_list[-1], int) используется для проверки, является ли последний элемент my_list числом (int). Если это так, условие выполняется, и выполняется соответствующая часть кода


# In[5]:


print("№4")
# Произвольные строки
s1 = "первая"
s2 = "вторая"
 
# Создание списка из двух строк, их длин и результата проверки лексикографического порядка
result = [s1, s2, len(s1), len(s2), s1 < s2] # сначала сохраняем сами строки, потом их длины, потом значение True или False, которое сообщит нам больше строка s1 чем s2 или нет(в питоне строки автоматически сравниваются в лексикограф порядке(сравнивается посимвольно, что позже стоит в алфавите то больше))
 
# Параметр output для выбора формата вывода
output = 'lengths'  # или order
 
if output == 'lengths':
    # Вывод длин строк
    print(f"Длины строк: {result[2]} и {result[3]}")
elif output == 'order':
    # Вывод описания порядка
    if result[4]:
        print(f"Строка '{result[0]}' идет ПОСЛЕ строки '{result[1]}'") # Если написать f перед строкой, то внутри в фигурных скобках можно писать названия переменных, вместо них автоматически будут подставляться значения этих переменных
    else:
        print(f"Строка '{result[0]}' идет ДО строки '{result[1]}'")
else:
    print("Неверный параметр output. Допустимые значения: 'lengths' или 'order'")


# In[8]:


print("№5")
# Запрос у пользователя двух целых чисел
max_val = int(input("Введите число для max_val: "))
repeat = int(input("Введите число для repeat: "))
 
# Создание списка
my_list = []
for i in range(repeat):
    for j in range(1, max_val + 1): # Начинаем с 1 по условию. Плюсуем к макс 1 тк крайнее значение отрезка(stop) указанное в рэндж не включается, это нужно чтобы наше число тоже попало в интервал и вывелось в результате
        my_list.append(j)
 
# Вывод списка
print(my_list)


# In[9]:


# 5.2
# Создание копии списка
copied_list = my_list.copy()
 
# Определение количества элементов для удаления из середины
remove_count = int(len(copied_list) * 0.8)
 
# Удаление элементов из середины копии списка
start_index = len(copied_list) // 2 - remove_count // 2 # определяем с какого индекса и по какой нужно будет удалить (Середина списка - середина удаленного) - начало тог что надо вырезать
end_index = start_index + remove_count # Конечный индекс - начальный индекс + количество удаленных элементов
copied_list = copied_list[:start_index] + copied_list[end_index:] # Изменяем список копию добавляя туда все что было в списке до старт индекс и после, используя срезы
 
# Умножение остальных элементов исходного списка на 10, которые не сохранены в скопированном списке
for i in range(len(my_list)):
    if my_list[i] not in copied_list:
        my_list[i] *= 10
 
# Вывод списков
print("Исходный список:", my_list)
print("Копия списка:", copied_list)


# In[10]:


print("№6")
input_string = "test_Stringss"
 
result_list = []  # создаем пустой список
string = input_string.lower()  # приводим строку к нижнему регистру функцией lower()
 
for i in range(len(string)):
    if string[i] != 's' or i == 0 or i == len(string) - 1:
        # Если текущий символ не является буквой "s" или находится на первом или последнем месте,
        # добавляем его в список как есть
        result_list.append(string[i])
    else:
        # Если текущий символ - буква "s" и не на первом или последнем месте,
        # добавляем в список строку из двойного предыдущего символа и одного следующего
        result_list.append(string[i-1] * 2 + string[i+1])
 
print(result_list)


# In[11]:


print("№7*")
length = int(input("Введите длину списка: "))
my_list = []
 
for i in range(length):
    element = input("Введите элемент списка: ")
    if element.isdigit() or (element.startswith('-') and element[1:].isdigit()):
        # Если введенное значение является числом (целым или с отрицательным знаком),
        # округляем его вверх и добавляем в список
        # Функция .startswith("") проверяет начинается ли элемент строки с того, что указано в скобках, там может быть и несколько символов
        # Функция .isdigit() проверяет составлена ли строка только из цифр
        # Мы проверяем тут  является ли введенная строка числом, проверяя также случай ввода отрицательных чисел со знаком минус. для этого используем вторую часть условия, то что вокруг and стоит
        # Мы проверяем либо строка из цифр или 0, тогда она проходит первое условие(до or), либо строка является отрицательным числом(запись начинается со знака минус) и все что после этого знака(т.е. начиная с жлементам с индексом 1) составлено из цифр
        my_list.append(int(element))
    elif element.lower() == "true":
        # Если введенное значение равно "True", добавляем в список True
        my_list.append(True)
    elif element.lower() == "false":
        # Если введенное значение равно "False", добавляем в список False
        my_list.append(False)
    else:
        # Если введенное значение не является числом и не равно "True" или "False",
        # добавляем его в список как строку
        my_list.append(element)
 
print(my_list)


# In[13]:


print("№8")
string1 = input("Введите первую строку: ")
string2 = input("Введите вторую строку: ")
 
words1 = string1.split()  # Разделяем по пробелам первую строку на слова и сохраняем их в список
words2 = string2.split()  # Разделяем по пробелам вторую строку на слова и сохраняем их в список
 
result = []  # Пустой список для результата
 
# Выполняем проход по спискам слов, пока у нас есть слова в обоих списках
while words1 and words2: # While word иил if words вернут True если список не пустой и False если список пустой
    result.append(words1.pop(0))  # Добавляем первое слово из первого списка в результат и удаляем его из списка. list.pop(index) удаляет элемент из списка по индексу и сдвигает остальные элементы влево
    result.append(words2.pop(0))  # Добавляем первое слово из второго списка в результат и удаляем его из списка
 
# Если в первом списке остались слова, добавляем их в результат
if words1:
    result.extend(words1) # list.extend(list2) расширяет список(result), добавляя все элементы списка, передаваемого в качестве аргумента(то что в скобках), в конец
 
# Если во втором списке остались слова, добавляем их в результат
if words2:
    result.extend(words2)
 
result_string = ' '.join(result)  # Преобразуем список результатов в строку, объединяя слова через пробел с помощью функции " ".join(имя списка). Вместо пробела в кавычках может быть любая строка символов иили символ. join cклеит элменты списка по переданному разделителю
print(result_string)


# In[ ]:




